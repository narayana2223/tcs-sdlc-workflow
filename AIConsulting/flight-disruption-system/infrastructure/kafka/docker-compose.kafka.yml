version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: flight-zookeeper
    networks:
      - flight-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: flight-kafka
    networks:
      - flight-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9997
      # Performance tuning
      KAFKA_LOG_RETENTION_HOURS: 168  # 1 week
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 10485760  # 10MB
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760  # 10MB
      KAFKA_NUM_PARTITIONS: 6  # Default partitions for new topics
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      # Compression
      KAFKA_COMPRESSION_TYPE: 'snappy'
      KAFKA_LOG_COMPRESSION_TYPE: 'snappy'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: flight-schema-registry
    networks:
      - flight-network
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
      SCHEMA_REGISTRY_DEBUG: 'true'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    hostname: connect
    container_name: flight-kafka-connect
    networks:
      - flight-network
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: flight-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: flight-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: flight-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: flight-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: flight-kafka-ui
    networks:
      - flight-network
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: flight-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: main
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      SERVER_SERVLET_CONTEXT_PATH: /kafka
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/kafka || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: flight-kafka-init
    networks:
      - flight-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    command: |
      bash -c 'echo "Creating Kafka topics..." &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic flight.events --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic disruption.events --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic passenger.events --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic rebooking.events --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic notification.events --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic compliance.events --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic cost.events --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic external.data --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic agent.decisions --partitions 6 --replication-factor 1 --config retention.ms=604800000 --config compression.type=snappy &&
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic system.metrics --partitions 3 --replication-factor 1 --config retention.ms=259200000 --config compression.type=snappy &&
      echo "Topics created successfully!" &&
      kafka-topics --bootstrap-server kafka:29092 --list'
    restart: "no"

networks:
  flight-network:
    driver: bridge
    name: flight-network

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: flight-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-flight_disruption}
      POSTGRES_USER: ${POSTGRES_USER:-flight_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./shared/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-flight_user} -d ${POSTGRES_DB:-flight_disruption}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flight-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: flight-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: flight-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: flight-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flight_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-flight_disruption}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Disruption Prediction Service
  disruption-predictor:
    build:
      context: ./services/disruption-predictor
      dockerfile: Dockerfile
    container_name: flight-disruption-predictor
    ports:
      - "${DISRUPTION_PREDICTOR_PORT:-8001}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flight_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-flight_disruption}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Passenger Management Service
  passenger-management:
    build:
      context: ./services/passenger-management
      dockerfile: Dockerfile
    container_name: flight-passenger-management
    ports:
      - "${PASSENGER_MANAGEMENT_PORT:-8002}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flight_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-flight_disruption}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - AMADEUS_API_KEY=${AMADEUS_API_KEY}
      - SABRE_API_KEY=${SABRE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Cost Optimization Service
  cost-optimizer:
    build:
      context: ./services/cost-optimizer
      dockerfile: Dockerfile
    container_name: flight-cost-optimizer
    ports:
      - "${COST_OPTIMIZER_PORT:-8003}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flight_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-flight_disruption}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - HOTEL_BOOKING_API_KEY=${HOTEL_BOOKING_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Compliance Service
  compliance:
    build:
      context: ./services/compliance
      dockerfile: Dockerfile
    container_name: flight-compliance
    ports:
      - "${COMPLIANCE_SERVICE_PORT:-8004}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flight_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-flight_disruption}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EU261_COMPENSATION_RATES_URL=${EU261_COMPENSATION_RATES_URL}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Notification Service
  notification:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: flight-notification
    ports:
      - "${NOTIFICATION_SERVICE_PORT:-8005}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flight_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-flight_disruption}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SMS_PROVIDER_API_KEY=${SMS_PROVIDER_API_KEY}
      - EMAIL_PROVIDER_API_KEY=${EMAIL_PROVIDER_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: flight-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./shared/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.3.0
    container_name: flight-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./shared/monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - ./shared/monitoring/grafana/dashboards/:/var/lib/grafana/dashboards/
    depends_on:
      - prometheus
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: flight-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: flight-kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Executive Dashboard
  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: flight-dashboard
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flight_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-flight_disruption}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - API_GATEWAY_URL=http://api-gateway:8000
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    name: flight-disruption-network
    driver: bridge